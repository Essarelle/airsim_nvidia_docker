diff --git Unreal/Plugins/AirSim/Source/RecordingThread.cpp Unreal/Plugins/AirSim/Source/RecordingThread.cpp
index a28beaa..69aa204 100644
--- Unreal/Plugins/AirSim/Source/RecordingThread.cpp
+++ Unreal/Plugins/AirSim/Source/RecordingThread.cpp
@@ -130,10 +130,10 @@ void FRecordingThread::SaveImage()
 
             uint64_t timestamp_millis = static_cast<uint64_t>(clock_->nowNanos() / 1.0E6);
 
-            GameThread->record_file << timestamp_millis << "\t";
-            GameThread->record_file << kinematics.pose.position.x() << "\t" << kinematics.pose.position.y() << "\t" << kinematics.pose.position.z() << "\t";
-            GameThread->record_file << kinematics.pose.orientation.w() << "\t" << kinematics.pose.orientation.x() << "\t" << kinematics.pose.orientation.y() << "\t" << kinematics.pose.orientation.z() << "\t";
-            GameThread->record_file << "\n";
+            //GameThread->record_file << timestamp_millis << "\t";
+            //GameThread->record_file << kinematics.pose.position.x() << "\t" << kinematics.pose.position.y() << "\t" << kinematics.pose.position.z() << "\t";
+            //GameThread->record_file << kinematics.pose.orientation.w() << "\t" << kinematics.pose.orientation.x() << "\t" << kinematics.pose.orientation.y() << "\t" << kinematics.pose.orientation.z() << "\t";
+            //GameThread->record_file << "\n";
 
             UAirBlueprintLib::LogMessage(TEXT("Screenshot saved to:"), filePath, LogDebugLevel::Success);
             imagesSaved++;
@@ -172,4 +172,4 @@ void FRecordingThread::Shutdown()
         delete Runnable;
         Runnable = NULL;
     }
-}
\ No newline at end of file
+}
diff --git Unreal/Plugins/AirSim/Source/SimMode/SimModeBase.cpp Unreal/Plugins/AirSim/Source/SimMode/SimModeBase.cpp
index 73dfe2e..be5d609 100644
--- Unreal/Plugins/AirSim/Source/SimMode/SimModeBase.cpp
+++ Unreal/Plugins/AirSim/Source/SimMode/SimModeBase.cpp
@@ -103,21 +103,22 @@ bool ASimModeBase::isRecording()
 
 void ASimModeBase::startRecording()
 {
-    if (record_file.is_open()) {
-        record_file.close();
-        UAirBlueprintLib::LogMessage(TEXT("Recording Error"), TEXT("File was already open"), LogDebugLevel::Failure);
-    }
-
-    std::string fullPath = common_utils::FileSystem::getLogFileNamePath(record_filename, "", ".txt", true);
-    common_utils::FileSystem::createTextFile(fullPath, record_file);
-
-    if (record_file.is_open()) {
-        is_recording = true;
-
-        UAirBlueprintLib::LogMessage(TEXT("Recording"), TEXT("Started"), LogDebugLevel::Success);
-    }
-    else
-        UAirBlueprintLib::LogMessage("Error creating log file", fullPath.c_str(), LogDebugLevel::Failure);
+is_recording = true;
+    //if (record_file.is_open()) {
+    //    record_file.close();
+    //    UAirBlueprintLib::LogMessage(TEXT("Recording Error"), TEXT("File was already open"), LogDebugLevel::Failure);
+    //}
+
+    //std::string fullPath = common_utils::FileSystem::getLogFileNamePath(record_filename, "", ".txt", true);
+    //common_utils::FileSystem::createTextFile(fullPath, record_file);
+
+    //if (record_file.is_open()) {
+    //    is_recording = true;
+
+    //    UAirBlueprintLib::LogMessage(TEXT("Recording"), TEXT("Started"), LogDebugLevel::Success);
+    //}
+    //else
+    //    UAirBlueprintLib::LogMessage("Error creating log file", fullPath.c_str(), LogDebugLevel::Failure);
 }
 
 bool ASimModeBase::toggleRecording()
@@ -133,11 +134,11 @@ bool ASimModeBase::toggleRecording()
 void ASimModeBase::stopRecording()
 {
     is_recording = false;
-    if (!record_file.is_open()) {
-        UAirBlueprintLib::LogMessage(TEXT("Recording Error"), TEXT("File was not open"), LogDebugLevel::Failure);
-    }
-    else
-        record_file.close();
-    
-    UAirBlueprintLib::LogMessage(TEXT("Recording"), TEXT("Stopped"), LogDebugLevel::Success);
-}
\ No newline at end of file
+    //if (!record_file.is_open()) {
+    //    UAirBlueprintLib::LogMessage(TEXT("Recording Error"), TEXT("File was not open"), LogDebugLevel::Failure);
+    //}
+    //else
+    //    record_file.close();
+    //
+    //UAirBlueprintLib::LogMessage(TEXT("Recording"), TEXT("Stopped"), LogDebugLevel::Success);
+}
diff --git Unreal/Plugins/AirSim/Source/SimMode/SimModeBase.h Unreal/Plugins/AirSim/Source/SimMode/SimModeBase.h
index 01e96d2..7cdc79c 100644
--- Unreal/Plugins/AirSim/Source/SimMode/SimModeBase.h
+++ Unreal/Plugins/AirSim/Source/SimMode/SimModeBase.h
@@ -34,7 +34,7 @@ public:
     virtual bool isRecording();
     FString getRecordingPath();
 
-    std::ofstream record_file;
+    //std::ofstream record_file;
     std::string record_filename = "airsim_rec";    
 protected:
     virtual void setupInputBindings();
diff --git Unreal/Plugins/AirSim/Source/SimMode/SimModeWorldMultiRotor.cpp Unreal/Plugins/AirSim/Source/SimMode/SimModeWorldMultiRotor.cpp
index a52a539..e5126d7 100644
--- Unreal/Plugins/AirSim/Source/SimMode/SimModeWorldMultiRotor.cpp
+++ Unreal/Plugins/AirSim/Source/SimMode/SimModeWorldMultiRotor.cpp
@@ -136,7 +136,7 @@ void ASimModeWorldMultiRotor::Tick(float DeltaSeconds)
             }
         }
 
-        if (isRecording() && record_file.is_open()) {
+        if (isRecording()/* && record_file.is_open()*/) {
             if (!isLoggingStarted)
             {
                 FString imagePathPrefix = common_utils::FileSystem::getLogFileNamePath("img_", "", "", false).c_str();
